version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: ai_creatives_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_creatives
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_creatives_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_creatives_backend
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/ai_creatives
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - ai_creatives_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        API_URL: http://backend:8000
    container_name: ai_creatives_frontend
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      API_URL: http://backend:8000
    depends_on:
      - backend
    networks:
      - ai_creatives_network

networks:
  ai_creatives_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local

