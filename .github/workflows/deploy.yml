name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: cr.yandex
  YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
  YC_SA_JSON_CREDENTIALS: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
  YC_K8S_CLUSTER_ID: ${{ secrets.YC_K8S_CLUSTER_ID }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run backend tests
        run: |
          cd backend
          # pytest tests/ --cov=. --cov-report=xml
          echo "Tests will be added"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linter
        run: |
          cd frontend
          npm run lint || true

  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Yandex Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: json_key
          password: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.YC_REGISTRY_ID }}/ai-creatives-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Yandex Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: json_key
          password: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.YC_REGISTRY_ID }}/ai-creatives-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            API_URL=https://yourdomain.com/api
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install yc CLI
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Authenticate with Yandex Cloud
        run: |
          echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' > key.json
          yc config profile create sa-profile
          yc config set service-account-key key.json
          rm key.json

      - name: Configure kubectl
        run: |
          yc managed-kubernetes cluster get-credentials ${{ env.YC_K8S_CLUSTER_ID }} --external

      - name: Update backend deployment
        run: |
          kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ env.YC_REGISTRY_ID }}/ai-creatives-backend:latest -n ai-creatives
          kubectl rollout status deployment/backend -n ai-creatives --timeout=5m

      - name: Update frontend deployment
        run: |
          kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.YC_REGISTRY_ID }}/ai-creatives-frontend:latest -n ai-creatives
          kubectl rollout status deployment/frontend -n ai-creatives --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods -n ai-creatives
          kubectl get services -n ai-creatives
          kubectl get ingress -n ai-creatives

  notify:
    name: Notify on completion
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Send notification
        run: |
          echo "Deployment ${{ job.status }}"
          # Добавьте интеграцию с Telegram/Slack/Email

