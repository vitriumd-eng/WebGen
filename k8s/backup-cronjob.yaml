apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: ai-creatives
spec:
  # Каждый день в 3:00 UTC
  schedule: "0 3 * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: postgres:14-alpine
            env:
            - name: POSTGRES_HOST
              value: "postgres"
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: ai-creatives-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: ai-creatives-config
                  key: POSTGRES_USER
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: ai-creatives-secrets
                  key: POSTGRES_PASSWORD
            command:
            - /bin/sh
            - -c
            - |
              BACKUP_FILE="/backup/db-backup-$(date +%Y%m%d-%H%M%S).sql.gz"
              echo "Creating backup: $BACKUP_FILE"
              pg_dump -h $POSTGRES_HOST -U $POSTGRES_USER $POSTGRES_DB | gzip > $BACKUP_FILE
              
              # Удаляем бэкапы старше 30 дней
              find /backup -name "db-backup-*.sql.gz" -mtime +30 -delete
              
              echo "Backup completed successfully"
              ls -lh /backup
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: postgres-backup-pvc
          restartPolicy: OnFailure

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-backup-pvc
  namespace: ai-creatives
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: yc-network-hdd

