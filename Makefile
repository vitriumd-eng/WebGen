# Makefile –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥

.PHONY: help dev stop build push deploy clean logs test

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
REGISTRY_ID ?= $(YC_REGISTRY_ID)
BACKEND_IMAGE = cr.yandex/$(REGISTRY_ID)/ai-creatives-backend
FRONTEND_IMAGE = cr.yandex/$(REGISTRY_ID)/ai-creatives-frontend
VERSION ?= latest

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (Docker Compose)
	@chmod +x scripts/local-dev.sh
	@./scripts/local-dev.sh

stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	docker-compose down

build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑—ã
	@echo "üî® –°–±–æ—Ä–∫–∞ backend..."
	docker build -t $(BACKEND_IMAGE):$(VERSION) ./backend
	@echo "üî® –°–±–æ—Ä–∫–∞ frontend..."
	docker build -t $(FRONTEND_IMAGE):$(VERSION) ./frontend
	@echo "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

push: build ## –°–æ–±—Ä–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Yandex Container Registry
	@echo "üì§ Push backend..."
	docker push $(BACKEND_IMAGE):$(VERSION)
	@echo "üì§ Push frontend..."
	docker push $(FRONTEND_IMAGE):$(VERSION)
	@echo "‚úÖ Push –∑–∞–≤–µ—Ä—à–µ–Ω"

deploy: ## –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤ Kubernetes
	@chmod +x scripts/deploy-k8s.sh
	@./scripts/deploy-k8s.sh

clean: ## –û—á–∏—Å—Ç–∏—Ç—å Docker —Ä–µ—Å—É—Ä—Å—ã
	docker-compose down -v
	docker system prune -f

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (Docker Compose)
	docker-compose logs -f

logs-k8s: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∏–∑ Kubernetes
	kubectl logs -l app=backend -n ai-creatives --tail=100 -f

test-backend: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã backend
	cd backend && pytest tests/ -v

test-frontend: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã frontend
	cd frontend && npm test

lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º
	cd backend && black . && flake8 .
	cd frontend && npm run lint

init-db: ## –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î (Docker Compose)
	docker-compose exec backend python init_db.py

migrate: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ (Docker Compose)
	docker-compose exec backend alembic upgrade head

migrate-create: ## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
	@read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: " name; \
	docker-compose exec backend alembic revision --autogenerate -m "$$name"

backup-db: ## –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î
	@mkdir -p backups
	docker-compose exec postgres pg_dump -U postgres ai_creatives | gzip > backups/backup-$$(date +%Y%m%d-%H%M%S).sql.gz
	@echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ backups/"

restore-db: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ –±—ç–∫–∞–ø–∞ (—É–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª: make restore-db FILE=backup.sql.gz)
	@if [ -z "$(FILE)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª: make restore-db FILE=backup.sql.gz"; \
		exit 1; \
	fi
	gunzip -c $(FILE) | docker-compose exec -T postgres psql -U postgres ai_creatives
	@echo "‚úÖ –ë–î –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤ –≤ Kubernetes
	kubectl get all -n ai-creatives

shell-backend: ## –ó–∞–π—Ç–∏ –≤ shell backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	docker-compose exec backend /bin/bash

shell-db: ## –ó–∞–π—Ç–∏ –≤ PostgreSQL
	docker-compose exec postgres psql -U postgres ai_creatives

security-scan: ## –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑—ã –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
	@echo "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ backend..."
	docker scout cves $(BACKEND_IMAGE):$(VERSION)
	@echo "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ frontend..."
	docker scout cves $(FRONTEND_IMAGE):$(VERSION)

